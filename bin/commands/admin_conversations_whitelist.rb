# frozen_string_literal: true
# This file was auto-generated by lib/tasks/web.rake

desc 'AdminConversationsWhitelist methods.'
command 'admin_conversations_whitelist' do |g|
  g.desc 'Add a whitelist of IDP groups for accessing a channel'
  g.long_desc %( Add a whitelist of IDP groups for accessing a channel )
  g.command 'add' do |c|
    c.flag 'channel_id', desc: 'The channel to whitelist a group for.'
    c.flag 'group_id', desc: 'The IDP Group ID to whitelist for the private channel.'
    c.flag 'team_id', desc: 'The workspace where the IDP Group and channel exist.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.admin_conversations_whitelist_add(options))
    end
  end

  g.desc 'List all IDP Groups linked to a channel'
  g.long_desc %( List all IDP Groups linked to a channel )
  g.command 'listGroupsLinkedToChannel' do |c|
    c.flag 'channel_id', desc: '.'
    c.flag 'team_id', desc: 'The workspace where the channele exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.admin_conversations_whitelist_listGroupsLinkedToChannel(options))
    end
  end

  g.desc 'Remove a whitelisted IDP group linked to a private channel'
  g.long_desc %( Remove a whitelisted IDP group linked to a private channel )
  g.command 'remove' do |c|
    c.flag 'channel_id', desc: 'The channel to remove a whitelisted group for.'
    c.flag 'group_id', desc: 'The IDP Group ID to remove from the private channel whitelist.'
    c.flag 'team_id', desc: 'The workspace where the IDP Group and channel exist.'
    c.action do |_global_options, options, _args|
      puts JSON.dump($client.admin_conversations_whitelist_remove(options))
    end
  end
end
