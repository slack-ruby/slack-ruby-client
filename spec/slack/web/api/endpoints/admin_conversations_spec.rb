# frozen_string_literal: true
# This file was auto-generated by lib/tasks/web.rake

require 'spec_helper'

RSpec.describe Slack::Web::Api::Endpoints::AdminConversations do
  let(:client) { Slack::Web::Client.new }
  context 'admin.conversations_archive' do
    it 'requires channel_id' do
      expect { client.admin_conversations_archive }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
  end
  context 'admin.conversations_convertToPrivate' do
    it 'requires channel_id' do
      expect { client.admin_conversations_convertToPrivate }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
  end
  context 'admin.conversations_create' do
    it 'requires is_private' do
      expect { client.admin_conversations_create(name: 'mychannel') }.to raise_error ArgumentError, /Required arguments :is_private missing/
    end
    it 'requires name' do
      expect { client.admin_conversations_create(is_private: 'true') }.to raise_error ArgumentError, /Required arguments :name missing/
    end
  end
  context 'admin.conversations_delete' do
    it 'requires channel_id' do
      expect { client.admin_conversations_delete }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
  end
  context 'admin.conversations_disconnectShared' do
    it 'requires channel_id' do
      expect { client.admin_conversations_disconnectShared }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
  end
  context 'admin.conversations_getConversationPrefs' do
    it 'requires channel_id' do
      expect { client.admin_conversations_getConversationPrefs }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
  end
  context 'admin.conversations_getTeams' do
    it 'requires channel_id' do
      expect { client.admin_conversations_getTeams }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
  end
  context 'admin.conversations_invite' do
    it 'requires channel_id' do
      expect { client.admin_conversations_invite(user_ids: 'U1234,U2345,U3456') }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
    it 'requires user_ids' do
      expect { client.admin_conversations_invite(channel_id: 'C12345') }.to raise_error ArgumentError, /Required arguments :user_ids missing/
    end
  end
  context 'admin.conversations_rename' do
    it 'requires channel_id' do
      expect { client.admin_conversations_rename(name: '') }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
    it 'requires name' do
      expect { client.admin_conversations_rename(channel_id: 'C12345') }.to raise_error ArgumentError, /Required arguments :name missing/
    end
  end
  context 'admin.conversations_setConversationPrefs' do
    it 'requires channel_id' do
      expect { client.admin_conversations_setConversationPrefs(prefs: '{"who_can_post":"type:admin,user:U1234,subteam:S1234"}') }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
    it 'requires prefs' do
      expect { client.admin_conversations_setConversationPrefs(channel_id: 'C1234') }.to raise_error ArgumentError, /Required arguments :prefs missing/
    end
  end
  context 'admin.conversations_setTeams' do
    it 'requires channel_id' do
      expect { client.admin_conversations_setTeams }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
  end
  context 'admin.conversations_unarchive' do
    it 'requires channel_id' do
      expect { client.admin_conversations_unarchive }.to raise_error ArgumentError, /Required arguments :channel_id missing/
    end
  end
end
