# frozen_string_literal: true
# This file was auto-generated by lib/tasks/web.rake

require 'spec_helper'

RSpec.describe Slack::Web::Api::Endpoints::Chat do
  let(:client) { Slack::Web::Client.new }
  context 'chat_appendStream' do
    it 'requires channel' do
      expect { client.chat_appendStream(ts: %q[], markdown_text: %q[**This is bold text**]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires ts' do
      expect { client.chat_appendStream(channel: %q[], markdown_text: %q[**This is bold text**]) }.to raise_error ArgumentError, /Required arguments :ts missing/
    end
    it 'requires markdown_text' do
      expect { client.chat_appendStream(channel: %q[], ts: %q[]) }.to raise_error ArgumentError, /Required arguments :markdown_text missing/
    end
  end
  context 'chat_command' do
    it 'requires channel' do
      expect { client.chat_command(command: %q[/who]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires command' do
      expect { client.chat_command(channel: %q[C1234567890]) }.to raise_error ArgumentError, /Required arguments :command missing/
    end
  end
  context 'chat_delete' do
    it 'requires channel' do
      expect { client.chat_delete(ts: %q["1405894322.002768"]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires ts' do
      expect { client.chat_delete(channel: %q[]) }.to raise_error ArgumentError, /Required arguments :ts missing/
    end
  end
  context 'chat_deleteScheduledMessage' do
    it 'requires channel' do
      expect { client.chat_deleteScheduledMessage(scheduled_message_id: %q[Q1234ABCD]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires scheduled_message_id' do
      expect { client.chat_deleteScheduledMessage(channel: %q[C123456789]) }.to raise_error ArgumentError, /Required arguments :scheduled_message_id missing/
    end
  end
  context 'chat_getPermalink' do
    it 'requires channel' do
      expect { client.chat_getPermalink(message_ts: %q[]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires message_ts' do
      expect { client.chat_getPermalink(channel: %q[]) }.to raise_error ArgumentError, /Required arguments :message_ts missing/
    end
  end
  context 'chat_meMessage' do
    it 'requires channel' do
      expect { client.chat_meMessage(text: %q[Hello world]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires text' do
      expect { client.chat_meMessage(channel: %q[]) }.to raise_error ArgumentError, /Required arguments :text missing/
    end
  end
  context 'chat_postEphemeral' do
    it 'requires channel' do
      expect { client.chat_postEphemeral(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], user: %q[U0BPQUNTA]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires user' do
      expect { client.chat_postEphemeral(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[]) }.to raise_error ArgumentError, /Required arguments :user missing/
    end
    it 'requires one of attachments, blocks, text' do
      expect { client.chat_postEphemeral(channel: %q[], user: %q[U0BPQUNTA]) }.to raise_error ArgumentError, /At least one of/

      expect(client).to receive(:post).with('chat.postEphemeral', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[], user: %q[U0BPQUNTA]})
      client.chat_postEphemeral(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[], user: %q[U0BPQUNTA])

      expect(client).to receive(:post).with('chat.postEphemeral', {blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], user: %q[U0BPQUNTA]})
      client.chat_postEphemeral(blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], user: %q[U0BPQUNTA])

      expect(client).to receive(:post).with('chat.postEphemeral', {text: %q[Hello world], channel: %q[], user: %q[U0BPQUNTA]})
      client.chat_postEphemeral(text: %q[Hello world], channel: %q[], user: %q[U0BPQUNTA])

      expect(client).to receive(:post).with('chat.postEphemeral', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], user: %q[U0BPQUNTA]})
      client.chat_postEphemeral(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], user: %q[U0BPQUNTA])

      expect(client).to receive(:post).with('chat.postEphemeral', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], text: %q[Hello world], channel: %q[], user: %q[U0BPQUNTA]})
      client.chat_postEphemeral(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], text: %q[Hello world], channel: %q[], user: %q[U0BPQUNTA])

      expect(client).to receive(:post).with('chat.postEphemeral', {blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], user: %q[U0BPQUNTA]})
      client.chat_postEphemeral(blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], user: %q[U0BPQUNTA])

      expect(client).to receive(:post).with('chat.postEphemeral', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], user: %q[U0BPQUNTA]})
      client.chat_postEphemeral(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], user: %q[U0BPQUNTA])
    end
    it 'encodes attachments, blocks as json' do
      expect(client).to receive(:post).with('chat.postEphemeral', {attachments: %q[{"data":["data"]}], channel: %q[], user: %q[U0BPQUNTA], blocks: %q[{"data":["data"]}]})
      client.chat_postEphemeral(attachments: {:data=>["data"]}, channel: %q[], user: %q[U0BPQUNTA], blocks: {:data=>["data"]})
    end
  end
  context 'chat_postMessage' do
    it 'requires channel' do
      expect { client.chat_postMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires one of attachments, blocks, text' do
      expect { client.chat_postMessage(channel: %q[]) }.to raise_error ArgumentError, /At least one of/

      expect(client).to receive(:post).with('chat.postMessage', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[]})
      client.chat_postMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[])

      expect(client).to receive(:post).with('chat.postMessage', {blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[]})
      client.chat_postMessage(blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[])

      expect(client).to receive(:post).with('chat.postMessage', {text: %q[Hello world], channel: %q[]})
      client.chat_postMessage(text: %q[Hello world], channel: %q[])

      expect(client).to receive(:post).with('chat.postMessage', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[]})
      client.chat_postMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[])

      expect(client).to receive(:post).with('chat.postMessage', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], text: %q[Hello world], channel: %q[]})
      client.chat_postMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], text: %q[Hello world], channel: %q[])

      expect(client).to receive(:post).with('chat.postMessage', {blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[]})
      client.chat_postMessage(blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[])

      expect(client).to receive(:post).with('chat.postMessage', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[]})
      client.chat_postMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[])
    end
    it 'encodes attachments, blocks, metadata as json' do
      expect(client).to receive(:post).with('chat.postMessage', {attachments: %q[{"data":["data"]}], channel: %q[], blocks: %q[{"data":["data"]}], metadata: %q[{"data":["data"]}]})
      client.chat_postMessage(attachments: {:data=>["data"]}, channel: %q[], blocks: {:data=>["data"]}, metadata: {:data=>["data"]})
    end
  end
  context 'chat_scheduleMessage' do
    it 'requires channel' do
      expect { client.chat_scheduleMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], post_at: %q[299876400]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires post_at' do
      expect { client.chat_scheduleMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[]) }.to raise_error ArgumentError, /Required arguments :post_at missing/
    end
    it 'requires one of attachments, blocks, text' do
      expect { client.chat_scheduleMessage(channel: %q[], post_at: %q[299876400]) }.to raise_error ArgumentError, /At least one of/

      expect(client).to receive(:post).with('chat.scheduleMessage', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[], post_at: %q[299876400]})
      client.chat_scheduleMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[], post_at: %q[299876400])

      expect(client).to receive(:post).with('chat.scheduleMessage', {blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], post_at: %q[299876400]})
      client.chat_scheduleMessage(blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], post_at: %q[299876400])

      expect(client).to receive(:post).with('chat.scheduleMessage', {text: %q[Hello world], channel: %q[], post_at: %q[299876400]})
      client.chat_scheduleMessage(text: %q[Hello world], channel: %q[], post_at: %q[299876400])

      expect(client).to receive(:post).with('chat.scheduleMessage', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], post_at: %q[299876400]})
      client.chat_scheduleMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], post_at: %q[299876400])

      expect(client).to receive(:post).with('chat.scheduleMessage', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], text: %q[Hello world], channel: %q[], post_at: %q[299876400]})
      client.chat_scheduleMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], text: %q[Hello world], channel: %q[], post_at: %q[299876400])

      expect(client).to receive(:post).with('chat.scheduleMessage', {blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], post_at: %q[299876400]})
      client.chat_scheduleMessage(blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], post_at: %q[299876400])

      expect(client).to receive(:post).with('chat.scheduleMessage', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], post_at: %q[299876400]})
      client.chat_scheduleMessage(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], post_at: %q[299876400])
    end
    it 'encodes attachments, blocks, metadata as json' do
      expect(client).to receive(:post).with('chat.scheduleMessage', {attachments: %q[{"data":["data"]}], channel: %q[], post_at: %q[299876400], blocks: %q[{"data":["data"]}], metadata: %q[{"data":["data"]}]})
      client.chat_scheduleMessage(attachments: {:data=>["data"]}, channel: %q[], post_at: %q[299876400], blocks: {:data=>["data"]}, metadata: {:data=>["data"]})
    end
  end
  context 'chat_startStream' do
    it 'requires channel' do
      expect { client.chat_startStream(thread_ts: %q[1721609600]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires thread_ts' do
      expect { client.chat_startStream(channel: %q[]) }.to raise_error ArgumentError, /Required arguments :thread_ts missing/
    end
  end
  context 'chat_stopStream' do
    it 'requires channel' do
      expect { client.chat_stopStream(ts: %q[]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires ts' do
      expect { client.chat_stopStream(channel: %q[]) }.to raise_error ArgumentError, /Required arguments :ts missing/
    end
    it 'encodes metadata as json' do
      expect(client).to receive(:post).with('chat.stopStream', {channel: %q[], ts: %q[], metadata: %q[{"data":["data"]}]})
      client.chat_stopStream(channel: %q[], ts: %q[], metadata: {:data=>["data"]})
    end
  end
  context 'chat_unfurl' do
    it 'encodes unfurls, user_auth_blocks, metadata as json' do
      expect(client).to receive(:post).with('chat.unfurl', {unfurls: %q[{"data":["data"]}], user_auth_blocks: %q[{"data":["data"]}], metadata: %q[{"data":["data"]}]})
      client.chat_unfurl(unfurls: {:data=>["data"]}, user_auth_blocks: {:data=>["data"]}, metadata: {:data=>["data"]})
    end
  end
  context 'chat_update' do
    it 'requires channel' do
      expect { client.chat_update(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], ts: %q["1405894322.002768"]) }.to raise_error ArgumentError, /Required arguments :channel missing/
    end
    it 'requires ts' do
      expect { client.chat_update(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[]) }.to raise_error ArgumentError, /Required arguments :ts missing/
    end
    it 'requires one of attachments, blocks, text' do
      expect { client.chat_update(channel: %q[], ts: %q["1405894322.002768"]) }.to raise_error ArgumentError, /At least one of/

      expect(client).to receive(:post).with('chat.update', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[], ts: %q["1405894322.002768"]})
      client.chat_update(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], channel: %q[], ts: %q["1405894322.002768"])

      expect(client).to receive(:post).with('chat.update', {blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], ts: %q["1405894322.002768"]})
      client.chat_update(blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], ts: %q["1405894322.002768"])

      expect(client).to receive(:post).with('chat.update', {text: %q[Hello world], channel: %q[], ts: %q["1405894322.002768"]})
      client.chat_update(text: %q[Hello world], channel: %q[], ts: %q["1405894322.002768"])

      expect(client).to receive(:post).with('chat.update', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], ts: %q["1405894322.002768"]})
      client.chat_update(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], channel: %q[], ts: %q["1405894322.002768"])

      expect(client).to receive(:post).with('chat.update', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], text: %q[Hello world], channel: %q[], ts: %q["1405894322.002768"]})
      client.chat_update(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], text: %q[Hello world], channel: %q[], ts: %q["1405894322.002768"])

      expect(client).to receive(:post).with('chat.update', {blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], ts: %q["1405894322.002768"]})
      client.chat_update(blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], ts: %q["1405894322.002768"])

      expect(client).to receive(:post).with('chat.update', {attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], ts: %q["1405894322.002768"]})
      client.chat_update(attachments: %q[[{"pretext": "pre-hello", "text": "text-world"}]], blocks: %q[[{"type": "section", "text": {"type": "plain_text", "text": "Hello world"}}]], text: %q[Hello world], channel: %q[], ts: %q["1405894322.002768"])
    end
    it 'encodes attachments, blocks, metadata as json' do
      expect(client).to receive(:post).with('chat.update', {attachments: %q[{"data":["data"]}], channel: %q[], ts: %q["1405894322.002768"], blocks: %q[{"data":["data"]}], metadata: %q[{"data":["data"]}]})
      client.chat_update(attachments: {:data=>["data"]}, channel: %q[], ts: %q["1405894322.002768"], blocks: {:data=>["data"]}, metadata: {:data=>["data"]})
    end
  end
end
