# frozen_string_literal: true
# This file was auto-generated by lib/tasks/web.rake

module Slack
  module Web
    module Api
      module Endpoints
        module AdminUsers
          #
          # Add an Enterprise user to a workspace.
          #
          # @option options [Object] :team_id
          #   The ID (T1234) of the workspace.
          # @option options [Object] :user_id
          #   The ID of the user to add to the workspace.
          # @option options [Object] :is_restricted
          #   True if user should be added to the workspace as a guest.
          # @option options [Object] :is_ultra_restricted
          #   True if user should be added to the workspace as a single-channel guest.
          # @see https://api.slack.com/methods/admin.users.assign
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/admin.users/admin.users.assign.json
          def admin_users_assign(options = {})
            throw ArgumentError.new('Required arguments :team_id missing') if options[:team_id].nil?
            throw ArgumentError.new('Required arguments :user_id missing') if options[:user_id].nil?
            post('admin.users.assign', options)
          end

          #
          # Invite a user to a workspace.
          #
          # @option options [Object] :channel_ids
          #   A comma-separated list of channel_ids for this user to join. At least one channel is required.
          # @option options [Object] :email
          #   The email address of the person to invite.
          # @option options [Object] :team_id
          #   The ID (T1234) of the workspace.
          # @option options [Object] :custom_message
          #   An optional message to send to the user in the invite email.
          # @option options [Object] :guest_expiration_ts
          #   Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
          # @option options [Object] :is_restricted
          #   Is this user a multi-channel guest user? (default: false).
          # @option options [Object] :is_ultra_restricted
          #   Is this user a single channel guest user? (default: false).
          # @option options [Object] :real_name
          #   Full name of the user.
          # @option options [Object] :resend
          #   Allow this invite to be resent in the future if a user has not signed up yet. (default: false).
          # @see https://api.slack.com/methods/admin.users.invite
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/admin.users/admin.users.invite.json
          def admin_users_invite(options = {})
            throw ArgumentError.new('Required arguments :channel_ids missing') if options[:channel_ids].nil?
            throw ArgumentError.new('Required arguments :email missing') if options[:email].nil?
            throw ArgumentError.new('Required arguments :team_id missing') if options[:team_id].nil?
            post('admin.users.invite', options)
          end

          #
          # Remove a user from a workspace.
          #
          # @option options [Object] :team_id
          #   The ID (T1234) of the workspace.
          # @option options [Object] :user_id
          #   The ID of the user to remove.
          # @see https://api.slack.com/methods/admin.users.remove
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/admin.users/admin.users.remove.json
          def admin_users_remove(options = {})
            throw ArgumentError.new('Required arguments :team_id missing') if options[:team_id].nil?
            throw ArgumentError.new('Required arguments :user_id missing') if options[:user_id].nil?
            post('admin.users.remove', options)
          end

          #
          # Set an existing guest, regular user, or owner to be an admin user.
          #
          # @option options [Object] :team_id
          #   The ID (T1234) of the workspace.
          # @option options [Object] :user_id
          #   The ID of the user to designate as an admin.
          # @see https://api.slack.com/methods/admin.users.setAdmin
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/admin.users/admin.users.setAdmin.json
          def admin_users_setAdmin(options = {})
            throw ArgumentError.new('Required arguments :team_id missing') if options[:team_id].nil?
            throw ArgumentError.new('Required arguments :user_id missing') if options[:user_id].nil?
            post('admin.users.setAdmin', options)
          end

          #
          # Set an existing guest, regular user, or admin user to be a workspace owner.
          #
          # @option options [Object] :team_id
          #   The ID (T1234) of the workspace.
          # @option options [Object] :user_id
          #   Id of the user to promote to owner.
          # @see https://api.slack.com/methods/admin.users.setOwner
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/admin.users/admin.users.setOwner.json
          def admin_users_setOwner(options = {})
            throw ArgumentError.new('Required arguments :team_id missing') if options[:team_id].nil?
            throw ArgumentError.new('Required arguments :user_id missing') if options[:user_id].nil?
            post('admin.users.setOwner', options)
          end

          #
          # Set an existing guest user, admin user, or owner to be a regular user.
          #
          # @option options [Object] :team_id
          #   The ID (T1234) of the workspace.
          # @option options [Object] :user_id
          #   The ID of the user to designate as a regular user.
          # @see https://api.slack.com/methods/admin.users.setRegular
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/admin.users/admin.users.setRegular.json
          def admin_users_setRegular(options = {})
            throw ArgumentError.new('Required arguments :team_id missing') if options[:team_id].nil?
            throw ArgumentError.new('Required arguments :user_id missing') if options[:user_id].nil?
            post('admin.users.setRegular', options)
          end
        end
      end
    end
  end
end
