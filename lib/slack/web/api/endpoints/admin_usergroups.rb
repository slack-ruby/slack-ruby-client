# frozen_string_literal: true
# This file was auto-generated by lib/tasks/web.rake

module Slack
  module Web
    module Api
      module Endpoints
        module AdminUsergroups
          #
          # Add one or more default channels to an IDP group.
          #
          # @option options [Object] :channel_ids
          #   Comma separated string of channel IDs.
          # @option options [Object] :team_id
          #   The workspace to add default channels in.
          # @option options [Object] :usergroup_id
          #   ID of the IDP group to add default channels for.
          # @see https://api.slack.com/methods/admin.usergroups.addChannels
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/admin.usergroups/admin.usergroups.addChannels.json
          def admin_usergroups_addChannels(options = {})
            throw ArgumentError.new('Required arguments :channel_ids missing') if options[:channel_ids].nil?
            throw ArgumentError.new('Required arguments :team_id missing') if options[:team_id].nil?
            throw ArgumentError.new('Required arguments :usergroup_id missing') if options[:usergroup_id].nil?
            post('admin.usergroups.addChannels', options)
          end

          #
          # List the channels linked to an org-level IDP group (user group).
          #
          # @option options [Object] :usergroup_id
          #   ID of the IDP group to list default channels for.
          # @option options [Object] :include_num_members
          #   Flag to include or exclude the count of members per channel.
          # @option options [Object] :team_id
          #   ID of the the workspace.
          # @see https://api.slack.com/methods/admin.usergroups.listChannels
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/admin.usergroups/admin.usergroups.listChannels.json
          def admin_usergroups_listChannels(options = {})
            throw ArgumentError.new('Required arguments :usergroup_id missing') if options[:usergroup_id].nil?
            post('admin.usergroups.listChannels', options)
          end

          #
          # Remove one or more default channels from an org-level IDP group (user group).
          #
          # @option options [Object] :channel_ids
          #   Comma-separated string of channel IDs.
          # @option options [Object] :usergroup_id
          #   ID of the IDP Group.
          # @see https://api.slack.com/methods/admin.usergroups.removeChannels
          # @see https://github.com/slack-ruby/slack-api-ref/blob/master/methods/admin.usergroups/admin.usergroups.removeChannels.json
          def admin_usergroups_removeChannels(options = {})
            throw ArgumentError.new('Required arguments :channel_ids missing') if options[:channel_ids].nil?
            throw ArgumentError.new('Required arguments :usergroup_id missing') if options[:usergroup_id].nil?
            post('admin.usergroups.removeChannels', options)
          end
        end
      end
    end
  end
end
